name: Build For Android

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

jobs:
  build-android:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - aarch64-linux-android
          - armv7-linux-androideabi

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Set up Android NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r25c
          add-to-path: true

      - name: Export toolchain paths and CC envs
        run: |
          TOOLCHAIN_BIN="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin"
          echo "${TOOLCHAIN_BIN}" >> "$GITHUB_PATH"
          echo "TOOLCHAIN_BIN=${TOOLCHAIN_BIN}" >> "$GITHUB_ENV"
          echo "CC_aarch64-linux-android=aarch64-linux-android21-clang" >> "$GITHUB_ENV"
          echo "CC_armv7-linux-androideabi=armv7a-linux-androideabi21-clang" >> "$GITHUB_ENV"
          echo "AR_aarch64-linux-android=llvm-ar" >> "$GITHUB_ENV"
          echo "AR_armv7-linux-androideabi=llvm-ar" >> "$GITHUB_ENV"
          echo "RANLIB_aarch64-linux-android=llvm-ranlib" >> "$GITHUB_ENV"
          echo "RANLIB_armv7-linux-androideabi=llvm-ranlib" >> "$GITHUB_ENV"

      - name: Prepare OpenSSL source per-target
        run: |
          curl -LO https://www.openssl.org/source/openssl-3.2.2.tar.gz
          tar xf openssl-3.2.2.tar.gz
          mv openssl-3.2.2 "openssl-${{ matrix.target }}"

      - name: Build OpenSSL for Android
        shell: bash
        run: |
          set -eux
          ANDROID_API=21
          CONFIG_OPTS="no-shared no-tests no-async no-afalgeng no-asm no-bf no-rc2 no-rc4 no-cast no-idea"
          if [ "${{ matrix.target }}" = "aarch64-linux-android" ]; then
            CONF="android-arm64"
            PREFIX="/opt/openssl-android-aarch64"
            CC_PATH="aarch64-linux-android21-clang"
          else
            CONF="android-arm"
            PREFIX="/opt/openssl-android-armv7"
            CC_PATH="armv7a-linux-androideabi21-clang"
          fi
          AR_PATH="llvm-ar"
          RANLIB_PATH="llvm-ranlib"
          NM_PATH="llvm-nm"
          cd "openssl-${{ matrix.target }}"
          perl ./Configure "${CONF}" ${CONFIG_OPTS} --prefix="${PREFIX}" CC="${CC_PATH}" AR="${AR_PATH}" RANLIB="${RANLIB_PATH}" NM="${NM_PATH}"
          make clean
          make -j1 install_sw

      - name: Configure Cargo for Android
        run: |
          mkdir -p .cargo
          cat > .cargo/config.toml <<'EOF'
          [target.aarch64-linux-android]
          linker = "aarch64-linux-android21-clang"
          ar = "llvm-ar"

          [target.armv7-linux-androideabi]
          linker = "armv7a-linux-androideabi21-clang"
          ar = "llvm-ar"
          EOF

      - name: Build Rust project
        env:
          OPENSSL_STATIC: "1"
          OPENSSL_DIR: ${{ matrix.target == 'aarch64-linux-android' && '/opt/openssl-android-aarch64' || '/opt/openssl-android-armv7' }}
          OPENSSL_LIB_DIR: ${{ matrix.target == 'aarch64-linux-android' && '/opt/openssl-android-aarch64/lib' || '/opt/openssl-android-armv7/lib' }}
          OPENSSL_INCLUDE_DIR: ${{ matrix.target == 'aarch64-linux-android' && '/opt/openssl-android-aarch64/include' || '/opt/openssl-android-armv7/include' }}
          OPENSSL_NO_PKG_CONFIG: "1"
        run: cargo build --release --target ${{ matrix.target }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: msl-cli-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/msl-cli
