name: Rust Release

on:
  push:
    tags:
      - "v*"
      - "v*-beta*"
      - "v*-rc*"
      - "nightly*"
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build (${{ matrix.os }}-${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          # macOS
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          # Windows
          - os: windows-latest
            target: x86_64-pc-windows-msvc

    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取全部 commit，方便生成 changelog

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install jq on Windows
        if: runner.os == 'Windows'
        run: choco install jq

      - name: Get crate version
        shell: bash
        run: |
          VERSION=$(cargo metadata --format-version=1 --no-deps | jq -r '.packages[0].version')
          echo "VERSION=$VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Install cross compiler (Linux aarch64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: sudo apt-get update && sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package artifact
        shell: bash
        run: |
          mkdir -p artifacts
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            BIN=$(ls target/${{ matrix.target }}/release/*.exe)
          else
            BIN=$(ls target/${{ matrix.target }}/release/* | head -n 1)
          fi
          cp "$BIN" artifacts/
          # SHA256
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            certutil -hashfile "$BIN" SHA256 | findstr /v ":" | findstr /v "hash" > "artifacts/${{ env.VERSION }}-${{ matrix.target }}.sha256"
          else
            shasum -a 256 "$BIN" > "artifacts/${{ env.VERSION }}-${{ matrix.target }}.sha256"
          fi

      - name: Sign artifact (GPG)
        if: env.GPG_PRIVATE_KEY != ''
        shell: bash
        run: |
          echo "$GPG_PRIVATE_KEY" | gpg --batch --import
          for file in artifacts/*; do
            gpg --batch --yes --armor --output "$file.sig" --detach-sig "$file"
          done
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: msl-cli-${{ env.VERSION }}-${{ matrix.target }}
          path: artifacts/*

  release:
    name: Publish Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate changelog
        id: changelog
        shell: bash
        run: |
          # 找到上一个 tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ || echo "")
          if [ -z "$PREV_TAG" ]; then
            echo "No previous tag found. Using full history."
            git log --pretty=format:"* %s (%h)" > CHANGELOG.md
          else
            echo "Generating changelog from $PREV_TAG to $GITHUB_REF_NAME"
            git log ${PREV_TAG}..HEAD --pretty=format:"* %s (%h)" > CHANGELOG.md
          fi
          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          cat CHANGELOG.md >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/**
          body: ${{ env.CHANGELOG }}
          prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'rc') || contains(github.ref, 'nightly') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
