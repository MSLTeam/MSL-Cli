name: Build & Release

on:
  push:
    tags:
      - "v*"
      - "v*-beta*"
      - "v*-rc*"
      - "nightly*"
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build (${{ matrix.os }}–${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
          - os: ubuntu-latest
            target: armv7-unknown-linux-musleabihf
          # Windows
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            target: x86_64-pc-windows-gnu
          - os: windows-latest
            target: aarch64-pc-windows-msvc
          # macOS
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          # FreeBSD
          - os: ubuntu-latest
            target: x86_64-unknown-freebsd
          - os: ubuntu-latest
            target: aarch64-unknown-freebsd
          # OpenBSD
          - os: ubuntu-latest
            target: x86_64-unknown-openbsd
          # iOS
          - os: macos-latest
            target: aarch64-apple-ios
          # WASM
          - os: ubuntu-latest
            target: wasm32-unknown-unknown
          - os: ubuntu-latest
            target: wasm32-wasi

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Install jq on Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Install jq on macOS
        if: runner.os == 'macOS'
        run: brew install jq

      - name: Install jq on Windows
        if: runner.os == 'Windows'
        shell: powershell
        run: choco install jq -y

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          profile: minimal
          targets: ${{ matrix.target }}

      # macOS: 明确为 iOS 设备架构安装目标（避免 E0463）
      - name: Add iOS target on macOS
        if: runner.os == 'macOS' && matrix.target == 'aarch64-apple-ios'
        run: rustup target add aarch64-apple-ios

      # macOS: 为 iOS 设备目标设置 SDK 与 clang（确保后续链接）
      - name: Configure iOS SDK and clang
        if: runner.os == 'macOS' && matrix.target == 'aarch64-apple-ios'
        run: |
          SDK=$(xcrun --sdk iphoneos --show-sdk-path)
          CLANG=$(xcrun --sdk iphoneos -f clang)
          echo "SDKROOT=$SDK" >> $GITHUB_ENV
          echo "CC_aarch64_apple_ios=$CLANG" >> $GITHUB_ENV
          # 为链接器注入 iPhoneOS SDK 与最低系统版本（可按需调整）
          echo "RUSTFLAGS=-C link-arg=-isysroot -C link-arg=$SDK -C link-arg=-miphoneos-version-min=12.0" >> $GITHUB_ENV

      - name: Add AArch64 MSVC target if needed
        if: matrix.target == 'aarch64-pc-windows-msvc'
        shell: powershell
        run: rustup target add aarch64-pc-windows-msvc

      - name: Install Strawberry Perl & OpenSSL for Windows
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          choco install strawberryperl -y
          choco install openssl.light -y
          $bin = 'C:\Program Files\OpenSSL\bin'
          if (Test-Path $bin) {
            Add-Content -Path $env:GITHUB_PATH -Value $bin
          }
          # Install missing Perl module for openssl-sys
          cpan -i Locale::Maketext::Simple
          # Export OpenSSL env vars     
          Add-Content -Path $env:GITHUB_ENV -Value 'OPENSSL_NO_VENDOR=1'
          Add-Content -Path $env:GITHUB_ENV -Value 'OPENSSL_DIR=C:\Program Files\OpenSSL'
          Add-Content -Path $env:GITHUB_ENV -Value 'OPENSSL_LIB_DIR=C:\Program Files\OpenSSL\lib'
          Add-Content -Path $env:GITHUB_ENV -Value 'OPENSSL_INCLUDE_DIR=C:\Program Files\OpenSSL\include'

      - name: Install cross (Linux only)
        if: runner.os == 'Linux'
        run: cargo install cross

      - name: Get crate version
        shell: bash
        run: |
          VERSION=$(cargo metadata --no-deps --format-version=1 \
            | jq -r '.packages[0].version')
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Build release binary
        shell: bash
        env:
          RUSTFLAGS: "-C panic=abort"
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            # 仅 Linux 用 cross
            cross build --release --target ${{ matrix.target }}
          else
            # macOS/Windows 用系统工具链（iOS 目标在上方已安装并配置）
            cargo build --release --target ${{ matrix.target }}
          fi

      - name: Prepare artifacts dir
        shell: bash
        run: |
          rm -rf artifacts && mkdir artifacts

      - name: Package artifact
        shell: bash
        run: |
          set -euo pipefail
          echo "Looking in target/${{ matrix.target }}/release"
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            BIN=$(find "target/${{ matrix.target }}/release" \
              -type f -name "*.exe" -print -quit)
          else
            BIN=$(find "target/${{ matrix.target }}/release" \
              -type f -perm -u+x -print -quit)
          fi
          test -n "$BIN" || { echo "No binary for ${{ matrix.target }}" \
            >&2; ls target/${{ matrix.target }}/release; exit 1; }
          cp "$BIN" artifacts/
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            powershell -Command \
              "Get-FileHash -Algorithm SHA256 '$BIN' | Select -Expand Hash \
              | Out-File -Encoding ascii artifacts/${{ env.VERSION }}-${{ matrix.target }}.sha256"
          else
            shasum -a 256 "$BIN" > \
              "artifacts/${{ env.VERSION }}-${{ matrix.target }}.sha256"
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: msl-cli-${{ env.VERSION }}-${{ matrix.target }}
          path: artifacts/*

  release:
    name: Publish Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: artifacts/**
          prerelease: ${{ contains(github.ref, 'beta') ||
                       contains(github.ref, 'rc') ||
                       contains(github.ref, 'nightly') }}
