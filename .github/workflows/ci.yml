name: Build & Release

on:
  push:
    tags:
      - "v*"
      - "v*-beta*"
      - "v*-rc*"
      - "nightly*"
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build (${{ matrix.os }}-${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
          - os: ubuntu-latest
            target: armv7-unknown-linux-musleabihf
          # Android (重点支持)
          - os: ubuntu-latest
            target: aarch64-linux-android
          - os: ubuntu-latest
            target: armv7-linux-androideabi
          # Windows
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            target: x86_64-pc-windows-gnu
          - os: windows-latest
            target: aarch64-pc-windows-msvc
          # macOS
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          # FreeBSD
          - os: ubuntu-latest
            target: x86_64-unknown-freebsd
          - os: ubuntu-latest
            target: aarch64-unknown-freebsd
          # OpenBSD
          - os: ubuntu-latest
            target: x86_64-unknown-openbsd
          # iOS
          - os: macos-latest
            target: aarch64-apple-ios
          # WASM
          - os: ubuntu-latest
            target: wasm32-unknown-unknown
          - os: ubuntu-latest
            target: wasm32-wasi

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install Android NDK (for android targets)
        if: startsWith(matrix.target, 'aarch64-linux-android') || startsWith(matrix.target, 'armv7-linux-androideabi')
        run: |
          wget https://dl.google.com/android/repository/android-ndk-r21e-linux-x86_64.zip -O ndk.zip
          unzip ndk.zip
          echo "ANDROID_NDK_HOME=$PWD/android-ndk-r21e" >> $GITHUB_ENV
          echo "$PWD/android-ndk-r21e/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH

      - name: Install cross
        if: runner.os != 'Windows'
        run: cargo install cross

      - name: Get crate version
        shell: bash
        run: |
          VERSION=$(cargo metadata --format-version=1 --no-deps | jq -r '.packages[0].version')
          echo "VERSION=$VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Build release binary
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cargo build --release --target ${{ matrix.target }}
          else
            cross build --release --target ${{ matrix.target }}
          fi

      - name: Prepare artifacts dir
        shell: bash
        run: |
          rm -rf artifacts
          mkdir -p artifacts

      - name: Package artifact
        shell: bash
        run: |
          set -euo pipefail

          echo "Checking for built binaries in target/${{ matrix.target }}/release"
          if [[ "$RUNNER_OS" == "Windows" ]]; then
              BIN=$(find "target/${{ matrix.target }}/release" -type f -name "*.exe" -print -quit)
          else
              BIN=$(find "target/${{ matrix.target }}/release" -type f -perm -u+x -print -quit)
          fi

          echo "BIN=$BIN"

          if [[ -z "$BIN" ]]; then
              echo "Error: No binary found for ${{ matrix.target }}" >&2
              ls "target/${{ matrix.target }}/release"
              exit 1
          fi

          cp "$BIN" artifacts/

          # SHA256 校验
          if [[ "$RUNNER_OS" == "Windows" ]]; then
              powershell -Command "Get-FileHash -Algorithm SHA256 '$BIN' | Select-Object -ExpandProperty Hash | Out-File -Encoding ascii 'artifacts/${{ env.VERSION }}-${{ matrix.target }}.sha256'"
          else
              shasum -a 256 "$BIN" > "artifacts/${{ env.VERSION }}-${{ matrix.target }}.sha256"
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: msl-cli-${{ env.VERSION }}-${{ matrix.target }}
          path: artifacts/*

  release:
    name: Publish Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/**
          prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'rc') || contains(github.ref, 'nightly') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
