name: Rust Release

on:
  push:
    tags:
      - "v*"
      - "v0-beta3.7"
      - "v*-rc*"
      - "nightly*"
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build (${{ matrix.os }}-${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross
        run: cargo install cross

      # 安装 openssl-dev 和 pkg-config（仅 Linux）
      - name: Install OpenSSL dev & pkg-config
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y pkg-config libssl-dev

      - name: Get crate version
        shell: bash
        run: |
          VERSION=$(cargo metadata --format-version=1 --no-deps | jq -r '.packages[0].version')
          echo "VERSION=$VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      # 构建时带 vendored feature，自动编译 openssl
      - name: Build release binary
        run: cross build --release --target ${{ matrix.target }} --features vendored

      - name: Prepare artifacts dir
        shell: bash
        run: |
          rm -rf artifacts
          mkdir -p artifacts

      - name: Package artifact
        shell: bash
        run: |
          set -euo pipefail

          echo "Checking for built binaries in target/${{ matrix.target }}/release"
          if [[ "$RUNNER_OS" == "Windows" ]]; then
              BIN=$(find "target/${{ matrix.target }}/release" -type f -name "*.exe" -print -quit)
          else
              BIN=$(find "target/${{ matrix.target }}/release" -type f -perm -u+x -print -quit)
          fi

          echo "BIN=$BIN"

          if [[ -z "$BIN" ]]; then
              echo "Error: No binary found for ${{ matrix.target }}" >&2
              ls "target/${{ matrix.target }}/release"
              exit 1
          fi

          cp "$BIN" artifacts/

          # SHA256 校验
          if [[ "$RUNNER_OS" == "Windows" ]]; then
              powershell -Command "Get-FileHash -Algorithm SHA256 '$BIN' | Select-Object -ExpandProperty Hash | Out-File -Encoding ascii 'artifacts/${{ env.VERSION }}-${{ matrix.target }}.sha256'"
          else
              shasum -a 256 "$BIN" > "artifacts/${{ env.VERSION }}-${{ matrix.target }}.sha256"
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: msl-cli-${{ env.VERSION }}-${{ matrix.target }}
          path: artifacts/*

  release:
    name: Publish Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/**
          prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'rc') || contains(github.ref, 'nightly') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
