name: Build MSL-Cli

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            target: x86_64-apple-darwin
            platform: macos
          - os: macos-latest
            target: aarch64-apple-darwin
            platform: macos
          - os: macos-latest
            target: x86_64-apple-ios
            platform: ios
          - os: macos-latest
            target: aarch64-apple-ios
            platform: ios
          - os: ubuntu-latest
            target: aarch64-linux-android
            platform: android
          - os: ubuntu-latest
            target: armv7-linux-androideabi
            platform: android
          - os: ubuntu-latest
            target: x86_64-linux-android
            platform: android
          - os: ubuntu-latest
            target: i686-linux-android
            platform: android

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Install OpenSSL & pkg-config (macOS)
        if: matrix.platform == 'macos'
        run: |
          brew install openssl@1.1 pkg-config

      - name: Set OpenSSL env vars (macOS)
        if: matrix.platform == 'macos'
        run: |
          echo "OPENSSL_NO_VENDOR=1" >> $GITHUB_ENV
          echo "OPENSSL_DIR=$(brew --prefix openssl@1.1)" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$(brew --prefix openssl@1.1)/lib/pkgconfig" >> $GITHUB_ENV

      - name: Add Rust target
        run: rustup target add ${{ matrix.target }}

      - name: Set up Android NDK
        if: matrix.platform == 'android'
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r25c
          add-to-path: true

      - name: Expose NDK clang in PATH
        if: matrix.platform == 'android'
        run: |
          TOOLCHAIN_BIN="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin"
          echo "${TOOLCHAIN_BIN}" >> $GITHUB_PATH
          ln -sf "${TOOLCHAIN_BIN}/aarch64-linux-android21-clang" "${TOOLCHAIN_BIN}/aarch64-linux-android-clang"
          ln -sf "${TOOLCHAIN_BIN}/armv7a-linux-androideabi21-clang" "${TOOLCHAIN_BIN}/armv7-linux-androideabi-clang"
          ln -sf "${TOOLCHAIN_BIN}/x86_64-linux-android21-clang" "${TOOLCHAIN_BIN}/x86_64-linux-android-clang"
          ln -sf "${TOOLCHAIN_BIN}/i686-linux-android21-clang" "${TOOLCHAIN_BIN}/i686-linux-android-clang"

      - name: Prepare OpenSSL source
        if: matrix.platform == 'android'
        run: |
          curl -LO https://www.openssl.org/source/openssl-3.2.2.tar.gz
          tar xf openssl-3.2.2.tar.gz
          mv openssl-3.2.2 "openssl-${{ matrix.target }}"

      - name: Build OpenSSL for Android
        if: matrix.platform == 'android'
        shell: bash
        run: |
          set -eux
          ANDROID_API=21
          CONFIG_OPTS="no-shared no-tests no-async no-afalgeng no-asm no-bf no-rc2 no-rc4 no-cast no-idea no-stdio"
          case "${{ matrix.target }}" in
            aarch64-linux-android)
              CONF="android-arm64"
              PREFIX="/opt/openssl-android-aarch64"
              ;;
            armv7-linux-androideabi)
              CONF="android-arm"
              PREFIX="/opt/openssl-android-armv7"
              ;;
            x86_64-linux-android)
              CONF="android-x86_64"
              PREFIX="/opt/openssl-android-x86_64"
              ;;
            i686-linux-android)
              CONF="android-x86"
              PREFIX="/opt/openssl-android-i686"
              ;;
          esac
          cd "openssl-${{ matrix.target }}"
          perl ./Configure "$CONF" $CONFIG_OPTS --prefix="$PREFIX" \
            CC="${{ matrix.target }}-clang" AR="llvm-ar" RANLIB="llvm-ranlib" NM="llvm-nm"
          make clean
          make -j1 install_sw

      - name: Configure Cargo for Android
        if: matrix.platform == 'android'
        run: |
          mkdir -p .cargo
          cat > .cargo/config.toml << 'EOF'
          [target.aarch64-linux-android]
          linker = "aarch64-linux-android21-clang"
          ar = "llvm-ar"
          [target.armv7-linux-androideabi]
          linker = "armv7a-linux-androideabi21-clang"
          ar = "llvm-ar"
          [target.x86_64-linux-android]
          linker = "x86_64-linux-android21-clang"
          ar = "llvm-ar"
          [target.i686-linux-android]
          linker = "i686-linux-android21-clang"
          ar = "llvm-ar"
          EOF

      - name: Set iOS linker
        if: matrix.platform == 'ios'
        run: |
          export SDKROOT=$(xcrun --sdk iphoneos --show-sdk-path)
          echo "CARGO_TARGET_X86_64_APPLE_IOS_LINKER=$(xcrun -f clang)" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_APPLE_IOS_LINKER=$(xcrun -f clang)" >> $GITHUB_ENV

      - name: Build
        run: |
          cargo build --release --target ${{ matrix.target }}
        env:
          OPENSSL_STATIC: "1"
          OPENSSL_NO_PKG_CONFIG: "1"
          OPENSSL_DIR: ${{ matrix.target == 'aarch64-linux-android' && '/opt/openssl-android-aarch64' || matrix.target == 'armv7-linux-androideabi' && '/opt/openssl-android-armv7' || matrix.target == 'x86_64-linux-android' && '/opt/openssl-android-x86_64' || matrix.target == 'i686-linux-android' && '/opt/openssl-android-i686' || '' }}
          OPENSSL_LIB_DIR: ${{ matrix.target == 'aarch64-linux-android' && '/opt/openssl-android-aarch64/lib' || matrix.target == 'armv7-linux-androideabi' && '/opt/openssl-android-armv7/lib' || matrix.target == 'x86_64-linux-android' && '/opt/openssl-android-x86_64/lib' || matrix.target == 'i686-linux-android' && '/opt/openssl-android-i686/lib' || '' }}
          OPENSSL_INCLUDE_DIR: ${{ matrix.target == 'aarch64-linux-android' && '/opt/openssl-android-aarch64/include' || matrix.target == 'armv7-linux-androideabi' && '/opt/openssl-android-armv7/include' || matrix.target == 'x86_64-linux-android' && '/opt/openssl-android-x86_64/include' || matrix.target == 'i686-linux-android' && '/opt/openssl-android-i686/include' || '' }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: msl-cli-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/msl-cli
