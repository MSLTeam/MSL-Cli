name: Build For Windows

on:
  push:
    tags: 
      - 'v*'
      - 'v*-beta*'
      - 'v*-rc*'
      - 'nightly*'
  workflow_dispatch:
  pull_request:

jobs:
  build-windows-msvc-x86_64:
    name: Windows MSVC (x86_64)
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install OpenSSL via vcpkg
        run: |
          vcpkg install openssl:x64-windows
          echo "OPENSSL_NO_VENDOR=1" >> $GITHUB_ENV

      - name: Build (MSVC x86_64)
        run: cargo build --release --target x86_64-pc-windows-msvc

      - name: Rename artifact
        run: mv target/x86_64-pc-windows-msvc/release/msl-cli.exe target/x86_64-pc-windows-msvc/release/msl-cli-x86_64-pc-windows-msvc.exe

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: msl-cli-x86_64-pc-windows-msvc
          path: target/x86_64-pc-windows-msvc/release/msl-cli-x86_64-pc-windows-msvc.exe

  build-windows-gnu-x86_64:
    name: Windows GNU (x86_64)
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install MSYS2 & OpenSSL (MINGW64)
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-pkg-config
            mingw-w64-x86_64-openssl
            mingw-w64-x86_64-rust

      - name: Set OpenSSL env vars
        shell: bash
        run: |
          echo "OPENSSL_NO_VENDOR=1" >> $GITHUB_ENV
          echo "OPENSSL_DIR=/mingw64" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=/mingw64/lib" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=/mingw64/include" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/mingw64/lib/pkgconfig" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV

      - name: Build (GNU x86_64)
        shell: msys2 {0}
        run: cargo build --release --target x86_64-pc-windows-gnu

      - name: Rename artifact
        shell: bash
        run: mv target/x86_64-pc-windows-gnu/release/msl-cli.exe target/x86_64-pc-windows-gnu/release/msl-cli-x86_64-pc-windows-gnu.exe

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: msl-cli-x86_64-pc-windows-gnu
          path: target/x86_64-pc-windows-gnu/release/msl-cli-x86_64-pc-windows-gnu.exe

  build-windows-msvc-arm64: 
    name: Windows MSVC (ARM64)
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        
      - name: Install vcpkg
        run: |
          git clone https://github.com/microsoft/vcpkg.git C:\vcpkg
          C:\vcpkg\bootstrap-vcpkg.bat
          echo "VCPKG_ROOT=C:\vcpkg" >> $env:GITHUB_ENV

      - name: Install OpenSSL (ARM64)
        run: |
          C:\vcpkg\vcpkg.exe install openssl:arm64-windows
          echo "OPENSSL_NO_VENDOR=1" >> $env:GITHUB_ENV
          echo "OPENSSL_DIR=C:\vcpkg\installed\arm64-windows" >> $env:GITHUB_ENV
          echo "OPENSSL_LIB_DIR=C:\vcpkg\installed\arm64-windows\lib" >> $env:GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=C:\vcpkg\installed\arm64-windows\include" >> $env:GITHUB_ENV
            
      - name: Install ARM64 target
        run: rustup target add aarch64-pc-windows-msvc
          
      - name: Build (MSVC ARM64)
        run: cargo build --release --target aarch64-pc-windows-msvc
        shell: bash

      - name: Rename artifact
        run: mv target/aarch64-pc-windows-msvc/release/msl-cli.exe target/aarch64-pc-windows-msvc/release/msl-cli-aarch64-pc-windows-msvc.exe
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: msl-cli-aarch64-pc-windows-msvc
          path: target/aarch64-pc-windows-msvc/release/msl-cli-aarch64-pc-windows-msvc.exe

  build-aarch64-windows-gnu:
    name: Windows GNU (ARM64)
    runs-on: ubuntu-latest

    steps:
      # 1. 拉取源码
      - name: Checkout source
        uses: actions/checkout@v4

      # 2. 安装官方交叉编译工具链（x86_64 → Windows ARM64）
      - name: Install aarch64 mingw-w64 toolchain
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            g++-aarch64-w64-mingw32 \
            binutils-aarch64-w64-mingw32 \
            gcc-aarch64-w64-mingw32

      # 3. 安装 Rust nightly + 目标架构
      - name: Install Rust nightly + target
        run: |
          rustup install nightly
          rustup target add aarch64-pc-windows-gnu --toolchain nightly

      # 4. 构建 std + release
      - name: Build (nightly + build-std)
        env:
          CC_aarch64_pc_windows_gnu: aarch64-w64-mingw32-gcc
          CXX_aarch64_pc_windows_gnu: aarch64-w64-mingw32-g++
        run: |
          cargo +nightly build \
            --release \
            --target aarch64-pc-windows-gnu \
            -Z build-std

      # 5. 重命名产物
      - name: Rename artifact
        run: |
          mkdir -p dist
          cp target/aarch64-pc-windows-gnu/release/msl-cli.exe \
             dist/msl-cli-aarch64-pc-windows-gnu.exe

      # 6. 上传产物
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: msl-cli-aarch64-pc-windows-gnu
          path: dist/*.exe
          
  windows-i686-msvc:
    name: Windows MSVC (i686)
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust (i686 MSVC)
        run: |
          rustup set profile minimal
          rustup install stable
          rustup target add i686-pc-windows-msvc

      - name: Build (i686 MSVC)
        run: cargo build --target i686-pc-windows-msvc --release

      - name: Rename artifact
        run: mv target/i686-pc-windows-msvc/release/msl-cli.exe target/i686-pc-windows-msvc/release/msl-cli-i686-pc-windows-msvc.exe

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: msl-cli-i686-pc-windows-msvc
          path: target/i686-pc-windows-msvc/release/msl-cli-i686-pc-windows-msvc.exe

  windows-i686-gnu:
    name: Windows GNU (i686)
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install MSYS2 & deps (MINGW32)
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW32
          update: true
          install: >-
            mingw-w64-i686-gcc
            mingw-w64-i686-pkg-config
            mingw-w64-i686-openssl
            mingw-w64-i686-rust

      - name: Set OpenSSL env
        shell: bash
        run: |
          echo "OPENSSL_NO_VENDOR=1" >> $GITHUB_ENV
          echo "OPENSSL_DIR=/mingw32" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=/mingw32/lib" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=/mingw32/include" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/mingw32/lib/pkgconfig" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV

      - name: Add i686 GNU target
        run: rustup target add i686-pc-windows-gnu

      - name: Build (GNU i686)
        shell: msys2 {0}
        run: cargo build --release --target i686-pc-windows-gnu

      - name: Rename artifact
        shell: bash
        run: mv target/i686-pc-windows-gnu/release/msl-cli.exe target/i686-pc-windows-gnu/release/msl-cli-i686-pc-windows-gnu.exe

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: msl-cli-i686-pc-windows-gnu
          path: target/i686-pc-windows-gnu/release/msl-cli-i686-pc-windows-gnu.exe
