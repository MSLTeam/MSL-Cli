name: Build For Windows

on:
  push:
    tags: 
      - 'v*'
      - 'v*-beta*'
      - 'v*-rc*'
      - 'nightly*'
  workflow_dispatch:
  pull_request:

jobs:
  build-windows-msvc-x86_64:
    name: Windows MSVC (x86_64)
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install OpenSSL via vcpkg
        run: |
          vcpkg install openssl:x64-windows
          echo "OPENSSL_NO_VENDOR=1" >> $GITHUB_ENV

      - name: Build (MSVC x86_64)
        run: cargo build --release --target x86_64-pc-windows-msvc

  build-windows-gnu-x86_64:
    name: Windows GNU (x86_64)
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install MSYS2 & OpenSSL (MINGW64)
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-pkg-config
            mingw-w64-x86_64-openssl
            mingw-w64-x86_64-rust

      - name: Set OpenSSL env vars
        shell: bash
        run: |
          echo "OPENSSL_NO_VENDOR=1" >> $GITHUB_ENV
          echo "OPENSSL_DIR=/mingw64" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=/mingw64/lib" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=/mingw64/include" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/mingw64/lib/pkgconfig" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV

      - name: Build (GNU x86_64)
        shell: msys2 {0}
        run: cargo build --release --target x86_64-pc-windows-gnu
        
  build-windows-msvc-arm64: 
    name: Windows MSVC (ARM64)
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        
      # 1. 安装 vcpkg
      - name: Install vcpkg
        run: |
          git clone https://github.com/microsoft/vcpkg.git C:\vcpkg
          C:\vcpkg\bootstrap-vcpkg.bat
          echo "VCPKG_ROOT=C:\vcpkg" >> $env:GITHUB_ENV

      # 2. 安装 ARM64 OpenSSL
      - name: Install OpenSSL (ARM64)
        run: |
          C:\vcpkg\vcpkg.exe install openssl:arm64-windows
          echo "OPENSSL_NO_VENDOR=1" >> $env:GITHUB_ENV
          echo "OPENSSL_DIR=C:\vcpkg\installed\arm64-windows" >> $env:GITHUB_ENV
          echo "OPENSSL_LIB_DIR=C:\vcpkg\installed\arm64-windows\lib" >> $env:GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=C:\vcpkg\installed\arm64-windows\include" >> $env:GITHUB_ENV
            
      - name: Install ARM64 target
        run: rustup target add aarch64-pc-windows-msvc
          
      - name: Build (MSVC ARM64)
        run: cargo build --release --target aarch64-pc-windows-msvc
        shell: bash


  build-windows-arm64-gnu-clang:
    name: Windows GNU (AMR64 via Clang)
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      # 安装 LLVM / Clang
      - name: Install LLVM
        uses: KyleMayes/install-llvm-action@v2
        with:
          version: "20" # 固定版本，避免 LLVM 更新带来不兼容

      # 安装 Rust ARM64 GNU target
      - name: Add Rust target
        run: rustup target add aarch64-pc-windows-gnu

      # 配置交叉编译器
      - name: Set env for ARM64 GNU
        run: |
          echo "CC_aarch64_pc_windows_gnu=clang" >> $env:GITHUB_ENV
          echo "AR_aarch64_pc_windows_gnu=llvm-ar" >> $env:GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_PC_WINDOWS_GNU_LINKER=clang" >> $env:GITHUB_ENV
          echo "OPENSSL_NO_VENDOR=1" >> $env:GITHUB_ENV

      # 构建
      - name: Build (Clang ARM64 GNU)
        run: cargo build --release --target aarch64-pc-windows-gnu
