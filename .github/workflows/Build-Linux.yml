name: Build For Linux

on:
  push:
    tags:
      - 'v*'
      - 'v*-beta*'
      - 'v*-rc*'
      - 'nightly*'
  pull_request:
  workflow_dispatch:

jobs:
  build-linux-gnu-x86_64:
    name: Linux GNU (x86_64)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Cache Rust toolchain & Cargo registry
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          path: |
            - $HOME/.cargo/registry
            - $HOME/.cargo/git
            - $HOME/.rustup

      - name: Install Rust (stable)
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build (release)
        run: cargo build --release --target x86_64-unknown-linux-gnu

      - name: Rename artifact
        run: |
          mkdir -p dist
          cp target/x86_64-unknown-linux-gnu/release/msl-cli \
             dist/msl-cli-x86_64-unknown-linux-gnu

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: msl-cli-x86_64-unknown-linux-gnu
          path: dist/msl-cli-x86_64-unknown-linux-gnu

  build-linux-musl-x86_64:
    name: Linux MUSL (x86_64)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Cache Rust toolchain & Cargo registry
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          path: |
            - $HOME/.cargo/registry
            - $HOME/.cargo/git
            - $HOME/.rustup

      - name: Install musl toolchain
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Install Rust target
        run: rustup target add x86_64-unknown-linux-musl

      - name: Build (static musl)
        env:
          CC: x86_64-linux-musl-gcc
        run: cargo build --release --target x86_64-unknown-linux-musl

      - name: Rename artifact
        run: |
          mkdir -p dist
          cp target/x86_64-unknown-linux-musl/release/msl-cli \
             dist/msl-cli-x86_64-unknown-linux-musl

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: msl-cli-x86_64-unknown-linux-musl
          path: dist/msl-cli-x86_64-unknown-linux-musl

  build-linux-gnu-aarch64:
    name: Linux GNU (aarch64)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache Rust toolchain & Cargo registry
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          path: |
            - $HOME/.cargo/registry
            - $HOME/.cargo/git
            - $HOME/.rustup

      - name: Install aarch64 glibc cross compiler
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Install Rust (stable)
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Add aarch64-unknown-linux-gnu target
        run: rustup target add aarch64-unknown-linux-gnu

      - name: Build (release)
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
        run: |
          cargo build --release --target aarch64-unknown-linux-gnu

      - name: Rename artifact
        run: |
          mkdir -p dist
          cp target/aarch64-unknown-linux-gnu/release/msl-cli \
             dist/msl-cli-aarch64-unknown-linux-gnu

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: msl-cli-aarch64-unknown-linux-gnu
          path: dist/msl-cli-aarch64-unknown-linux-gnu

  build-linux-musl-aarch64:
    name: Linux MUSL (aarch64) via Zig
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Install Zig (one-step tar.xz extraction)
        shell: bash
        run: |
          set -euxo pipefail
          ZIG_URL="https://ziglang.org/builds/zig-x86_64-linux-0.15.0-dev.1593+399bace2f.tar.xz"
          curl -sSL "$ZIG_URL" -o zig.tar.xz
          mkdir zig-dist
          tar -xJf zig.tar.xz -C zig-dist --strip-components=1
          echo "$PWD/zig-dist" >> $GITHUB_PATH
          which zig
          zig version
    
      # 3. Cache Cargo & rustup
      - name: Cache Rust toolchain & Cargo registry
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          path: |
            $HOME/.cargo/registry
            $HOME/.cargo/git
            $HOME/.rustup

      # 4. Install Rust & add MUSL target
      - name: Install Rust (stable) & add target
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Add aarch64-unknown-linux-musl target
        run: rustup target add aarch64-unknown-linux-musl

      # 5. Build with Zig as linker
      - name: Build (static musl via Zig)
        env:
          # 通知 Cargo 在链接阶段使用 zig cc
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER: zig cc
          # ring/openssl-sys 等 C 库编译时也会用 zig cc
          CC_aarch64_unknown_linux_musl: zig cc
          CXX_aarch64_unknown_linux_musl: zig c++
          AR_aarch64_unknown_linux_musl: zig ar
          RANLIB_aarch64_unknown_linux_musl: zig ranlib
          OPENSSL_STATIC: 1
        run: cargo build --release --target aarch64-unknown-linux-musl
        shell: bash

      # 6. 收集产物
      - name: Rename & upload artifact
        run: |
          mkdir -p dist
          cp target/aarch64-unknown-linux-musl/release/msl-cli \
             dist/msl-cli-aarch64-unknown-linux-musl
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: msl-cli-aarch64-unknown-linux-musl
          path: dist/msl-cli-aarch64-unknown-linux-musl
