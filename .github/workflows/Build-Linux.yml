name: Build For Linux

on:
  push:
    tags:
      - 'v*'
      - 'v*-beta*'
      - 'v*-rc*'
      - 'nightly*'
  pull_request:
  workflow_dispatch:

jobs:
  build-linux-gnu-x86_64:
    name: Linux GNU (x86_64)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Cache Rust toolchain & Cargo registry
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          path: |
            $HOME/.cargo/registry
            $HOME/.cargo/git
            $HOME/.rustup

      - name: Install Rust (stable)
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build (release)
        run: cargo build --release --target x86_64-unknown-linux-gnu

      - name: Rename artifact
        run: |
          mkdir -p dist
          cp target/x86_64-unknown-linux-gnu/release/msl-cli \
             dist/msl-cli-x86_64-unknown-linux-gnu

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: msl-cli-x86_64-unknown-linux-gnu
          path: dist/msl-cli-x86_64-unknown-linux-gnu

  build-linux-musl-x86_64:
    name: Linux MUSL (x86_64)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Cache Rust toolchain & Cargo registry
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          path: |
            $HOME/.cargo/registry
            $HOME/.cargo/git
            $HOME/.rustup

      - name: Install musl toolchain
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Install Rust target
        run: rustup target add x86_64-unknown-linux-musl

      - name: Build (static musl)
        env:
          CC: x86_64-linux-musl-gcc
        run: cargo build --release --target x86_64-unknown-linux-musl

      - name: Rename artifact
        run: |
          mkdir -p dist
          cp target/x86_64-unknown-linux-musl/release/msl-cli \
             dist/msl-cli-x86_64-unknown-linux-musl

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: msl-cli-x86_64-unknown-linux-musl
          path: dist/msl-cli-x86_64-unknown-linux-musl

  build-linux-gnu-aarch64:
    name: Linux GNU (aarch64)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Cache Rust toolchain & Cargo registry
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          path: |
            $HOME/.cargo/registry
            $HOME/.cargo/git
            $HOME/.rustup

      - name: Install aarch64 glibc cross compiler
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Install Rust (stable)
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Add aarch64-unknown-linux-gnu target
        run: rustup target add aarch64-unknown-linux-gnu

      - name: Build (release)
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
        run: cargo build --release --target aarch64-unknown-linux-gnu

      - name: Rename artifact
        run: |
          mkdir -p dist
          cp target/aarch64-unknown-linux-gnu/release/msl-cli \
             dist/msl-cli-aarch64-unknown-linux-gnu

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: msl-cli-aarch64-unknown-linux-gnu
          path: dist/msl-cli-aarch64-unknown-linux-gnu

  build-linux-musl-aarch64:
    name: Linux MUSL (aarch64) via Zig
    runs-on: ubuntu-latest
    env:
      # Zig 版本及下载地址
      ZIG_VERSION: "0.15.0-dev.1593+399bace2f"
      ZIG_URL:     "https://ziglang.org/builds/zig-x86_64-linux-${{ env.ZIG_VERSION }}.tar.xz"

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: 缓存 Zig dist & wrappers
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-zig-${{ env.ZIG_VERSION }}
          path: |
            zig-dist
            zig-wrap

      - name: 安装 Zig 并生成 C/AR/RANLIB wrappers
        shell: bash
        run: |
          set -euxo pipefail

          # 下载 & 解压
          curl -sSL "$ZIG_URL" -o zig.tar.xz
          mkdir zig-dist
          tar -xJf zig.tar.xz -C zig-dist --strip-components=1

          # 生成 wrapper 脚本
          mkdir zig-wrap

          cat > zig-wrap/zig-cc << 'EOF'
          #!/usr/bin/env bash
          set -euxo pipefail
          exec "$(dirname "$0")/../zig-dist/zig" cc \
            --target=aarch64-linux-musl "$@"
          EOF

          cat > zig-wrap/zig-ar << 'EOF'
          #!/usr/bin/env bash
          set -euxo pipefail
          exec "$(dirname "$0")/../zig-dist/zig" ar "$@"
          EOF

          cat > zig-wrap/zig-ranlib << 'EOF'
          #!/usr/bin/env bash
          set -euxo pipefail
          exec "$(dirname "$0")/../zig-dist/zig" ranlib "$@"
          EOF

          chmod +x zig-wrap/*

          # 将 dist 与 wrap 目录加入后续步骤 PATH
          echo "$PWD/zig-dist" >> $GITHUB_PATH
          echo "$PWD/zig-wrap" >> $GITHUB_PATH

      - name: Cache Rust toolchain & Cargo registry
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          path: |
            $HOME/.cargo/registry
            $HOME/.cargo/git
            $HOME/.rustup

      - name: Install Rust (stable) & 添加 MUSL 目标
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Add aarch64-unknown-linux-musl target
        run: rustup target add aarch64-unknown-linux-musl

      - name: Build (static musl via Zig)
        shell: bash
        env:
          CC: zig-cc
          AR: zig-ar
          RANLIB: zig-ranlib
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER: zig-cc
          OPENSSL_STATIC: 1
        run: cargo build --release --target aarch64-unknown-linux-musl

      - name: Rename & upload artifact
        shell: bash
        run: |
          mkdir -p dist
          cp target/aarch64-unknown-linux-musl/release/msl-cli \
             dist/msl-cli-aarch64-unknown-linux-musl

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: msl-cli-aarch64-unknown-linux-musl
          path: dist/msl-cli-aarch64-unknown-linux-musl
