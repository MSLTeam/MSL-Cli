name: Build For Linux

on:
  push:
    tags:
      - 'v*'
      - 'v*-beta*'
      - 'v*-rc*'
      - 'nightly*'
  pull_request:
  workflow_dispatch:

jobs:
  build-linux-gnu-x86_64:
    name: Linux GNU (x86_64)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Cache Rust toolchain & Cargo registry
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          path: |
            $HOME/.cargo/registry
            $HOME/.cargo/git
            $HOME/.rustup

      - name: Install Rust (stable)
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build (release)
        run: cargo build --release --target x86_64-unknown-linux-gnu

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: msl-cli-x86_64-unknown-linux-gnu
          path: target/x86_64-unknown-linux-gnu/release/msl-cli

  build-linux-musl-x86_64:
    name: Linux MUSL (x86_64)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Cache Rust toolchain & Cargo registry
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          path: |
            $HOME/.cargo/registry
            $HOME/.cargo/git
            $HOME/.rustup

      - name: Install musl toolchain
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools linux-libc-dev linux-headers-$(uname -r)

      - name: Install Rust target
        run: rustup target add x86_64-unknown-linux-musl

      - name: Download and build OpenSSL for x86_64-musl
        shell: bash
        run: |
          set -euxo pipefail
          OPENSSL_VERSION=1.1.1w
          curl -sSL "https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz" -o openssl.tar.gz
          tar -xzf openssl.tar.gz
          cd openssl-${OPENSSL_VERSION}
          sed -i 's|#   include <linux/mman.h>|#   include <sys/mman.h>|' crypto/mem_sec.c
          export CC=musl-gcc
          export AR=ar
          export RANLIB=ranlib
          ./Configure linux-x86_64 no-shared no-tests no-afalgeng --prefix="$PWD/../openssl-install"
          make -j"$(nproc)" build_libs
          make install_sw

      - name: Build (static musl)
        env:
          CC: x86_64-linux-musl-gcc
          OPENSSL_DIR: ${{ github.workspace }}/openssl-install
          OPENSSL_LIB_DIR: ${{ github.workspace }}/openssl-install/lib
          OPENSSL_INCLUDE_DIR: ${{ github.workspace }}/openssl-install/include
        run: cargo build --release --target x86_64-unknown-linux-musl

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: msl-cli-x86_64-unknown-linux-musl
          path: target/x86_64-unknown-linux-musl/release/msl-cli

  build-linux-gnu-aarch64:
    name: Linux GNU (aarch64)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Cache Rust toolchain & Cargo registry
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          path: |
            $HOME/.cargo/registry
            $HOME/.cargo/git
            $HOME/.rustup

      - name: Install aarch64 glibc cross compiler
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            gcc-aarch64-linux-gnu \
            g++-aarch64-linux-gnu

      - name: Download and build OpenSSL for aarch64-gnu
        shell: bash
        run: |
          set -euxo pipefail
          OPENSSL_VERSION=1.1.1w
          curl -sSL "https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz" \
            -o openssl.tar.gz
          tar -xzf openssl.tar.gz
          cd openssl-${OPENSSL_VERSION}
          sed -i 's|#include <linux/version.h>|#include <sys/utsname.h>|' engines/e_afalg.c
          export CC=aarch64-linux-gnu-gcc
          export AR=ar
          export RANLIB=ranlib
          ./Configure linux-aarch64 no-shared no-tests no-afalgeng \
            --prefix="$PWD/../openssl-install"
          make -j"$(nproc)" build_libs
          make install_sw

      - name: Install Rust (stable)
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Add aarch64-unknown-linux-gnu target
        run: rustup target add aarch64-unknown-linux-gnu

      - name: Build (release)
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
          OPENSSL_DIR: ${{ github.workspace }}/openssl-install
          OPENSSL_LIB_DIR: ${{ github.workspace }}/openssl-install/lib
          OPENSSL_INCLUDE_DIR: ${{ github.workspace }}/openssl-install/include
        run: cargo build --release --target aarch64-unknown-linux-gnu

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: msl-cli-aarch64-unknown-linux-gnu
          path: target/aarch64-unknown-linux-gnu/release/msl-cli
          
  build-linux-musl-aarch64:
    name: Linux MUSL (aarch64)
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Zig
        shell: bash
        run: |
          set -euxo pipefail
          curl -sSL "https://ziglang.org/builds/zig-x86_64-linux-0.16.0-dev.565+f50c64797.tar.xz" -o zig.tar.xz
          mkdir zig-dist
          tar -xJf zig.tar.xz -C zig-dist --strip-components=1
          mkdir -p zig-wrap
          cat > zig-wrap/aarch64-linux-musl-cc << 'EOF'
          #!/usr/bin/env bash
          set -euxo pipefail
          SYSROOT="$(rustc --print sysroot)/lib/rustlib/aarch64-unknown-linux-musl/lib/self-contained"
          LIBDIR="$(rustc --print sysroot)/lib/rustlib/aarch64-unknown-linux-musl/lib"
          args=()
          for a in "$@"; do
            case "$a" in
              --target=*|-target=*|"$SYSROOT"/*) ;;
              *) args+=("$a") ;;
            esac
          done
          exec "$(dirname "$0")/../zig-dist/zig" cc -target aarch64-linux-musl -L"$LIBDIR" "${args[@]}"
          EOF
          cat > zig-wrap/zig-ar << 'EOF'
          #!/usr/bin/env bash
          set -euxo pipefail
          exec "$(dirname "$0")/../zig-dist/zig" ar "$@"
          EOF
          cat > zig-wrap/zig-ranlib << 'EOF'
          #!/usr/bin/env bash
          set -euxo pipefail
          exec "$(dirname "$0")/../zig-dist/zig" ranlib "$@"
          EOF
          chmod +x zig-wrap/*
          echo "$PWD/zig-dist" >> $GITHUB_PATH
          echo "$PWD/zig-wrap" >> $GITHUB_PATH
          
      - name: Build OpenSSL for aarch64-musl
        shell: bash
        run: |
          set -euxo pipefail

          OPENSSL_VERSION=1.1.1w
          curl -sSL "https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz" -o openssl.tar.gz
          tar -xzf openssl.tar.gz
          cd openssl-${OPENSSL_VERSION}

          # 显式指定交叉编译器，避免 cross-compile-prefix 拼接
          export CC="$PWD/../zig-wrap/aarch64-linux-musl-cc"
          export AR=zig-ar
          export RANLIB=zig-ranlib

          ./Configure linux-aarch64 no-shared no-tests \
            --prefix="$PWD/../openssl-install"
          make -j"$(nproc)" build_libs
          make install_sw   

      - name: Cache Rust & Cargo
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          path: |
            $HOME/.cargo/registry
            $HOME/.cargo/git
            $HOME/.rustup

      - name: Install Rust & Add MUSL target
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - run: rustup target add aarch64-unknown-linux-musl

      - name: Build (static musl via Zig)
        shell: bash
        env: 
          CC_aarch64_unknown_linux_musl: aarch64-linux-musl-cc
          AR_aarch64_unknown_linux_musl: zig-ar
          RANLIB_aarch64_unknown_linux_musl: zig-ranlib
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER: aarch64-linux-musl-cc
          OPENSSL_STATIC: "1"
          OPENSSL_DIR: ${{ github.workspace }}/openssl-install
        run: cargo build --release --target aarch64-unknown-linux-musl

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: msl-cli-aarch64-unknown-linux-musl
          path: target/aarch64-unknown-linux-musl/release/msl-cli

  build-linux-gnu-i686:
    name: Linux GNU (i686)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache Rust toolchain & Cargo registry
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-cargo-i686-${{ hashFiles('**/Cargo.lock') }}
          path: |
            $HOME/.cargo/registry
            $HOME/.cargo/git
            $HOME/.rustup

      - name: Setup multilib & OpenSSL dev for i386
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y \
            gcc-multilib \
            g++-multilib \
            libc6-dev:i386 \
            libssl-dev:i386 \
            pkg-config

      - name: Install Rust (stable)
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Add i686 target
        run: rustup target add i686-unknown-linux-gnu

      - name: Build (release)
        env:
          CARGO_TARGET_I686_UNKNOWN_LINUX_GNU_LINKER: gcc
          RUSTFLAGS: "-C link-arg=-m32"
          OPENSSL_DIR: /usr
          OPENSSL_LIB_DIR: /usr/lib/i386-linux-gnu
          OPENSSL_INCLUDE_DIR: /usr/include/i386-linux-gnu
        run: cargo build --release --target i686-unknown-linux-gnu

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: msl-cli-i686-unknown-linux-gnu
          path: target/i686-unknown-linux-gnu/release/msl-cli

  cross-linux-musl-i686:
    name: Cross Linux MUSL (i686)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install cross
        run: cargo install --locked cross

      - name: Add Rust target
        run: rustup target add i686-unknown-linux-musl

      - name: Build (i686-unknown-linux-musl)
        run: cross build --release --target i686-unknown-linux-musl --features vendored-openssl

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: msl-cli-i686-unknown-linux-musl
          path: target/i686-unknown-linux-musl/release/msl-cli


  cross-linux-gnu-armv7:
    name: Cross Linux GNU (armv7)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install cross
        run: cargo install --locked cross

      - name: Add Rust target
        run: rustup target add armv7-unknown-linux-gnueabihf

      - name: Build (armv7-unknown-linux-gnueabihf)
        run: cross build --release --target armv7-unknown-linux-gnueabihf --features vendored-openssl

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: msl-cli-armv7-unknown-linux-gnueabihf
          path: target/armv7-unknown-linux-gnueabihf/release/msl-cli

  cross-linux-gnu-riscv64:
    name: Cross Linux GNU (riscv64)
    runs-on: ubuntu-latest
    env:
      CROSS_CONTAINER: local/riscv64-gnu-openssl:latest
    steps:
      - uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build custom cross image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: .github/docker/Dockerfile.riscv64-gnu
          push: false
          tags: local/riscv64-gnu-openssl:latest

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install cross
        run: cargo install --locked cross

      - name: Add Rust target
        run: rustup target add riscv64gc-unknown-linux-gnu

      - name: Install OpenSSL dev
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config

      - name: Build msl-cli
        run: cross build --release --target riscv64gc-unknown-linux-gnu

      - uses: actions/upload-artifact@v4
        with:
          name: msl-cli-riscv64gc-unknown-linux-gnu
          path: target/riscv64gc-unknown-linux-gnu/release/msl-cli

  cross-linux-musl-riscv64:
    name: Cross Linux MUSL (riscv64)
    runs-on: ubuntu-latest
    env:
      OPENSSL_PREFIX: ${{ github.workspace }}/openssl-riscv
    steps:
      - uses: actions/checkout@v4
      - name: Install C cross toolchain
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-riscv64-linux-musl g++-riscv64-linux-musl binutils-riscv64-linux-musl
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all
      - name: Setup Buildx
        uses: docker/setup-buildx-action@v2
      - name: Install cross
        run: cargo install --locked cross
      - name: Add Rust target
        run: rustup target add riscv64gc-unknown-linux-musl
      - name: Build OpenSSL for riscv64-musl
        run: |
          git clone https://github.com/openssl/openssl.git
          cd openssl
          ./Configure linux-generic64 no-shared no-tests \
            --prefix=$OPENSSL_PREFIX \
            --cross-compile-prefix=riscv64-linux-musl-
          make -j$(nproc) install_sw
      - name: Build msl-cli
        env:
          OPENSSL_DIR: ${{ env.OPENSSL_PREFIX }}
          OPENSSL_INCLUDE_DIR: ${{ env.OPENSSL_PREFIX }}/include
          OPENSSL_LIB_DIR: ${{ env.OPENSSL_PREFIX }}/lib
          OPENSSL_STATIC: "1"
        run: cross build --release --target riscv64gc-unknown-linux-musl
      - uses: actions/upload-artifact@v4
        with:
          name: msl-cli-riscv64gc-unknown-linux-musl
          path: target/riscv64gc-unknown-linux-musl/release/msl-cli
